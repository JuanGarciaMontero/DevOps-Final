pipeline {
    agent any
    environment {
        POSTGRES_DB = 'ejer_final'
        POSTGRES_USER = 'juan'
        POSTGRES_PASSWORD = 'juan'
    }
    stages {
        stage('Iniciar contenedor de PostgreSQL') {
            steps {
                script {
                    // Crear y ejecutar el contenedor de PostgreSQL
                    def postgresContainer = docker.image('postgres:latest').run(
                        "-p 5432:5432 -e POSTGRES_DB=${POSTGRES_DB} -e POSTGRES_USER=${POSTGRES_USER} -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
                    )
                }
            }
        }
        stage('Iniciar contenedor con Python y app') {
            steps {
                script {
                    // Utilizar 'script' para ejecutar comandos en un bloque
                    // Dentro del contenedor Docker
                    def appContainer = docker.image('juangarciamontero/app13:1.0.9').inside {
                        // Imprimir información sobre la versión de Python
                        echo 'Ejecutando Python --version:'
                        sh 'python --version'

                        // Esperar 10 segundos antes de intentar conectarse
                        sleep(time: 10, unit: 'SECONDS')

                        // Ejecutar las pruebas unitarias
                        sh 'pytest ./QA/tests'

                        // Ejecutar pruebas con cobertura
                        sh 'pytest --cov=app ./QA/tests'
                    }

                    // Capturar el código de salida de las pruebas
                    def exitCode = appContainer.run("echo \$?").trim()

                    // Marcar la construcción como fallida si las pruebas fallan
                    if (exitCode != "0") {
                        error "Las pruebas fallaron con el código de salida ${exitCode}"
                    }
                }
            }
        }
    }
    post {
        always {
            // Detener y eliminar el contenedor de PostgreSQL después de la ejecución del pipeline
            script {
                postgresContainer.stop()
                postgresContainer.remove(force: true)
            }
            echo "Fin del pipeline"
        }
    }
}
