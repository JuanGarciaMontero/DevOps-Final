pipeline {
    agent any
    environment {
        POSTGRES_DB = 'ejer_final'
        POSTGRES_USER = 'juan'
        POSTGRES_PASSWORD = 'juan'
        DOCKER_IMAGE = 'postgres:latest'
    }
    stages {
        stage('Preparación del entorno') {
            steps {
                script {
                    // Iniciar contenedor de PostgreSQL
                    docker.image(DOCKER_IMAGE)
                        .withRun("-p 5432:5432 -e POSTGRES_DB=${POSTGRES_DB} -e POSTGRES_USER=${POSTGRES_USER} -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD}")
                }
            }
        }
        stage('Stage crea contenedor con Python') {
            steps {
                script {
                    // Utilizar 'script' para ejecutar comandos en un bloque
                    // Dentro del contenedor Docker
                    docker.image('juangarciamontero/app13:1.0.1').inside { 

                        // Imprimir información sobre la versión de Python
                        echo 'Ejecutando Python --version:'
                        sh 'python --version'

                        // Ejecutar las pruebas unitarias
                        sh 'pytest'

                        // Ejecutar pruebas con cobertura
                        sh 'pytest --cov=app'

                        // Ejecutar pruebas lintenigh
                        sh 'flake8'
                    }
                }
            }
        }
    }
    post {
        always {
            // Detener y eliminar el contenedor de PostgreSQL después de la ejecución del pipeline
            script {
                docker.image(DOCKER_IMAGE).stop()
                docker.image(DOCKER_IMAGE).remove(force: true)
            }
            echo "Fin del pipeline"
        }
    }
}
