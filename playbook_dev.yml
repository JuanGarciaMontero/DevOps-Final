- name: Instalación y Configuración Servidor Nginx con Flask
  hosts: web
  gather_facts: yes
  become: true
  tasks:
    - name: Instalar software nginx
      apt:
        name: nginx
        state: present

    - name: Crear usuario nginx
      user:
        name: nginx
        state: present

    - name: Instalar software python y pip
      apt:
        name: "{{ item }}"
        update_cache: yes
        state: present
      loop:
        - python3
        - python3-pip

    - name: Instalar virtualenv global
      pip:
        name: virtualenv
        executable: pip3

    - name: Instalar requirements de python en su entorno virtual
      pip:
        name: "{{ item }}"
        virtualenv: /code/mlvenv
      loop:
        - flask
        - sqlalchemy
        - psycopg2-binary
        - flask-sqlalchemy
        - flask-Testing
        - pytest==7.4.2
        - coverage
        - flake8
        - gunicorn
        - pandas

    - name: Activar entorno virtual
      ansible.builtin.shell:
        cmd: source /code/mlvenv/bin/activate
        executable: /bin/bash
      environment:
        VIRTUAL_ENV: /code/mlvenv
        PATH: "{{ '/code/mlvenv/bin' }}:{{ ansible_env.PATH }}"


- name: Instalación y Configuración Base de datos PostgreSQL
  hosts: db
  gather_facts: yes
  become: true
  tasks:
    - name: Instalar Docker (si no está instalado)
      apt:
        name: docker.io
        state: present
      ignore_errors: yes

    - name: Ejecutar contenedor de PostgreSQL
      command: "docker run -d -p 5432:5432 -e POSTGRES_DB={{ POSTGRES_DB }} -e POSTGRES_USER={{ POSTGRES_USER }} -e POSTGRES_PASSWORD={{ POSTGRES_PASSWORD }} --name postgres-container postgres:13"


- name: Tareas comunes
  hosts: localhost
  gather_facts: true
  become: true
  tasks:
    - name: Crear archivos de aprovisionamiento
      ansible.builtin.file:
        state: touch
        path: /etc/provisioned
        modification_time: preserve
        access_time: preserve

    - name: Cambio fecha
      lineinfile:
        path: /etc/provisioned
        regex: "last provision:.*"
        line: "last provision: {{ ansible_date_time.iso8601 }}"

  handlers:
    - name: Reload PostgreSQL
      systemd:
        name: postgresql
        state: restarted
