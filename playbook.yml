- name: Instalación y Configuración Servidor Nginx con Flask
  hosts: web
  gather_facts: yes
  become: true
  tasks:
    - name: Instalar software nginx
      apt:
        name: nginx
        state: present

    - name: Crear usuario nginx
      user:
        name: nginx
        state: present

    - name: Instalar software python y  pip
      apt:
        name: "{{ item }}"
        update_cache: yes
        state: present
      loop:
        - python3
        - python3-pip

    - name: Instalar virtualenv global
      ansible.builtin.pip:
        name: virtualenv

    - name: Instalar requirements de python en su entorno virtual
      ansible.builtin.pip:
        name: flask, sqlalchemy, psycopg2-binary, flask-sqlalchemy, flask-Testing, pytest==7.4.2, coverage, flake8, gunicorn, pandas
        virtualenv: /code/mlvenv

    - name: Activar entorno virtual
      shell:
        cmd: source /code/mlvenv/bin/activate
        executable: /bin/bash
      environment:
        VIRTUAL_ENV: /code/mlvenv
        PATH: "{{ '/code/mlvenv/bin' }}:{{ ansible_env.PATH }}"
  

- name: Instalación y Configuración  Base de datos PostgreSQL
  hosts: db
  gather_facts: yes
  become: true
  tasks:

    - name: Instalar software postgresql
      apt:
        name: "{{ item }}"
        update_cache: yes
        state: present
      loop:
        - postgresql   # Instalar PostgreSQL
    
    - name: Configurar autenticación md5 en PostgreSQL
      become: yes
      lineinfile:
        path: /etc/postgresql/14/main/pg_hba.conf  # Reemplaza <version> con la versión específica de PostgreSQL
        regexp: '^local\s+all\s+all\s+peer'
        line: 'local   posgres           posgres                                    md5'
      notify: Reload PostgreSQL

    - name: Reload PostgreSQL
      systemd:
        name: postgresql
        state: restarted

    - name: Instalar psycopg2 para PostgreSQL
      become: yes
      apt:
        name: python3-psycopg2
        state: present
    
    - name: Incluir variables desde Vault
      ansible.builtin.include_vars:
        file: /home/juan/Ansible-Final/secrets.yml
      tags: vault
    
    - name: Debugging
      debug:
        msg: "PGDATABASE={{ PGDATABASE }} PGUSER={{ PGUSER }} PGPASSWORD={{ PGPASSWORD }}"

    - name: Debugging - Variables de Entorno
      debug:
        msg: "PGDATABASE={{ lookup('env', 'PGDATABASE') }} PGUSER={{ lookup('env', 'PGUSER') }} PGPASSWORD={{ lookup('env', 'PGPASSWORD') }}"

    - name: Crear base de datos y usuario en PostgreSQL
      postgresql_user:
        db: "{{ PGDATABASE }}"
        name: "{{ PGUSER }}"
        password: "{{ PGPASSWORD }}"  # Agregar esta línea con la contraseña deseada
        state: present
        login_user: root  # Especificar el usuario con permisos para crear otros usuarios
      become: yes
      notify: Reload PostgreSQL  # Notificar para recargar PostgreSQL
      environment:
        PATH: "{{ '/code/mlvenv/bin' }}:{{ ansible_env.PATH }}"
        PYTHONPATH: "{{ '/code/mlvenv/lib/python3.x/site-packages' }}"
      ignore_errors: yes  # Ignorar el error si la instalación de psycopg2 falla temporalmente
      vars:
        ansible_python_interpreter: "/code/mlvenv/bin/python3"
        PGHOST: localhost
        PGUSER: "{{ PGUSER }}"
        PGPASSWORD: "{{ PGPASSWORD }}"
        PGSSLMODE: allow  # Permitir conexiones sin SSL

- name: Tareas comunes
  hosts: localhost
  gather_facts: true
  become: true
  tasks:
    - name: Crear archivos de aprovisionamiento
      file:
        state: touch
        path: /etc/provisioned
        modification_time: preserve
        access_time: preserve

    - name: Cambio fecha
      lineinfile:
        path: /etc/provisioned
        regex: "last provision:.*"
        line: "last provision: {{ ansible_date_time.iso8601 }}"

  handlers:
       - name: Reload PostgreSQL
         systemd:
           name: postgresql
           state: restarted
         become: yes