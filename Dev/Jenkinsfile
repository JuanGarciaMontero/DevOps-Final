pipeline {
    agent any

    environment {
        POSTGRES_DB = 'ejer_final'
        POSTGRES_USER = 'juan'
        POSTGRES_PASSWORD = 'juan'
    }

    stages {
        stage('Iniciar contenedor de PostgreSQL') {
            steps {
                script {
                    // Crear y ejecutar el contenedor de PostgreSQL
                    def postgresContainer = docker.image('postgres:latest').run(
                        "-p 5432:5432 -e POSTGRES_DB=${POSTGRES_DB} -e POSTGRES_USER=${POSTGRES_USER} -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
                    )

                }
            }
        }

        stage('Iniciar contenedor con Python y app') {
            steps {
                script {
                    // Utilizar 'script' para ejecutar comandos en un bloque
                    // Dentro del contenedor Docker
                    def appContainer = docker.image('juangarciamontero/app13:1.0.8').inside {
                        // Imprimir información sobre la versión de Python
                        echo 'Ejecutando Python --version:'
                        sh 'python --version'

                        // Mostrar datos desde la aplicación
                        sh 'curl http://localhost:5000/data'

                        // Insertar en la base de datos
                        sh 'curl -X POST -H "Content-Type: application/json" -d \'{"name": "Juan"}\' http://localhost:5000/data'
                        sh 'curl -X POST -H "Content-Type: application/json" -d \'{"name": "Fernando"}\' http://localhost:5000/data'
                        sh 'curl -X POST -H "Content-Type: application/json" -d \'{"name": "Luis"}\' http://localhost:5000/data'

                        // Mostrar datos después de la inserción
                        sh 'curl http://127.0.0.1:5000/data'

                        // Borrar por id
                        sh 'curl -X DELETE http://localhost:5000/data/3'
                    }
                }
            }
        }
    }

    post {
        always {
            // Detener y eliminar el contenedor de PostgreSQL después de la ejecución del pipeline
            script {
                postgresContainer.stop()
                postgresContainer.remove(force: true)
            }
            echo "Fin del pipeline"
        }
    }
}
